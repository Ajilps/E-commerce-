<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .otp-input {
            width: 50px;
            height: 50px;
            text-align: center;
            font-size: 24px;
        }
        .countdown {
            font-size: 14px;
            color: #6c757d;
        }
        #alertMessage {
            display: none;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container">
        <div class="row justify-content-center align-items-center min-vh-100">
            <div class="col-md-6 col-lg-4">
                <div class="card shadow">
                    <div class="card-body p-4">
                        <h4 class="text-center mb-3">OTP Verification</h4>
                        <p class="text-center text-muted mb-4">Enter the 4-digit code sent to your <br> <b id="email"> <%= locals.email %></b></p>
                        
                        <!-- Alert for success/error messages -->
                        <div id="alertMessage" class="alert mb-3" role="alert"></div>

                        <div class="d-flex justify-content-center gap-2 mb-4">
                            <input type="text" maxlength="1" class="form-control otp-input" id="otp1">
                            <input type="text" maxlength="1" class="form-control otp-input" id="otp2">
                            <input type="text" maxlength="1" class="form-control otp-input" id="otp3">
                            <input type="text" maxlength="1" class="form-control otp-input" id="otp4">
                        </div>

                        <div class="text-center mb-4">
                            <button class="btn btn-link text-decoration-none" id="resendBtn" disabled>
                                Resend OTP <span id="timer" class="countdown">(30s)</span>
                            </button>
                        </div>

                        <button class="btn btn-primary w-100" id="verifyBtn" disabled>
                            <span id="verifyBtnText">Verify</span>
                            <span id="verifyBtnSpinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>

        document.addEventListener('DOMContentLoaded', function() {
            const useremail = document.getElementById('email').innerText;
            console.log(useremail);

            // API endpoint configuration - Replace with your actual API URL
            const API_URL = `/user/verify-email`;
            console.log(API_URL);
            
            const otpInputs = [
                document.getElementById('otp1'),
                document.getElementById('otp2'),
                document.getElementById('otp3'),
                document.getElementById('otp4')
            ];
            const resendBtn = document.getElementById('resendBtn');
            const timerSpan = document.getElementById('timer');
            const verifyBtn = document.getElementById('verifyBtn');
            const verifyBtnText = document.getElementById('verifyBtnText');
            const verifyBtnSpinner = document.getElementById('verifyBtnSpinner');
            const alertMessage = document.getElementById('alertMessage');
            let countdown = 30;
            let timerInterval;

            // Start initial timer
            startTimer();

            // Handle input changes
            otpInputs.forEach((input, index) => {
                input.addEventListener('input', (e) => {
                    if (e.target.value.length === 1) {
                        if (!/^\d+$/.test(e.target.value)) {
                            e.target.value = '';
                            return;
                        }
                        if (index < otpInputs.length - 1) {
                            otpInputs[index + 1].focus();
                        }
                    }
                    updateVerifyButton();
                });

                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Backspace' && !e.target.value && index > 0) {
                        otpInputs[index - 1].focus();
                    }
                });
            });

            // Handle resend button
            resendBtn.addEventListener('click', () => {
                otpInputs.forEach(input => input.value = '');
                startTimer();
                hideAlert();
               // reloading the window 
                window.location.reload();
                //  fetch(`/user/resentOtp/${useremail}`).then(data => data.json()).then(data=>console.log(data)).catch(err=>console.log(err));
                // console.log(`request send ${API_URL}`)
            });

            // Handle verify button
            verifyBtn.addEventListener('click', async () => {
                
                const otp = otpInputs.map(input => input.value).join('');
                
                // Show loading state
                setLoadingState(true);
                hideAlert();

                try {
                   
                
                    const response = await fetch(API_URL, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ "otp": otp, email:useremail })
                    });

                    const data = await response.json();

                    if (response.ok) {
                        showAlert('OTP verified successfully!', 'success');
                        // Handle successful verification (e.g., redirect)
                        window.location.href = '/user/login'
                    } else {
                        showAlert(data.message || 'Invalid OTP. Please try again.', 'danger');
                    }
                } catch (error) {
                    showAlert('An error occurred. Please try again.', 'danger');
                } finally {
                    setLoadingState(false);
                }
            });

            function startTimer() {
                countdown = 10;
                resendBtn.disabled = true;
                updateTimer();

                clearInterval(timerInterval);
                timerInterval = setInterval(() => {
                    countdown--;
                    updateTimer();
                    
                    if (countdown === 0) {
                        clearInterval(timerInterval);
                        resendBtn.disabled = false;
                        timerSpan.textContent = '';
                    }
                }, 1000);
            }

            function updateTimer() {
                timerSpan.textContent = countdown > 0 ? `(${countdown}s)` : '';
            }

            function updateVerifyButton() {
                const allFilled = otpInputs.every(input => input.value.length === 1);
                verifyBtn.disabled = !allFilled;
            }

            function setLoadingState(isLoading) {
                verifyBtn.disabled = isLoading;
                verifyBtnText.textContent = isLoading ? 'Verifying...' : 'Verify';
                if (isLoading) {
                    verifyBtnSpinner.classList.remove('d-none');
                } else {
                    verifyBtnSpinner.classList.add('d-none');
                }
            }

            function showAlert(message, type) {
                alertMessage.textContent = message;
                alertMessage.className = `alert alert-${type} mb-3`;
                alertMessage.style.display = 'block';
            }

            function hideAlert() {
                alertMessage.style.display = 'none';
            }
        });
    </script>
</body>
</html>