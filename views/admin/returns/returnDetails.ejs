<%- include('../adminHead.ejs') %>

  <div class="container my-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h1>Order Details</h1>
      <div id="buttonContainer">
        <!-- <button class="btn btn-outline-danger me-3 " onclick="returnController('<%#=order._id%>', 'approve')">approve
          Return </button>
        <button class="btn btn-outline-danger me-3 " onclick="returnController('<%#=order._id%>', 'reject')">Rejected
          Return </button> -->
      </div>
    </div>

    <div class="row">
      <div class="col-md-6">
        <div class="card mb-4">
          <div class="card-body">

            <h5 class="card-title">Order : <%= order.orderId %>
            </h5>
            <p class="card-text">Status : <%= order.status %>
            </p>
            <% let date=new Date(order.createdAt) %>
              <p class="card-text">Added: <%= `${date.getDate()}/ ${date.toLocaleString('default', { month: 'short' })}
                  / ${date.getFullYear() }` %>
              </p>
              <p class="card-text">Payment Method: <%= order.paymentMethod %>
              </p>
              <p class="card-text">Payment Status: <%= order.paymentStatus %>
              </p>
              <!-- <p class="card-text">Shipping Method: Flat Shipping</p> -->
          </div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="card mb-4">
          <div class="card-body">
            <h5 class="card-title">Customer</h5>
            <p class="card-text">
              <%= order?.userId?.username %>
            </p>
            <p class="card-text">
              <%= order?.userId?.email %>
            </p>
            <p class="card-text">
              <%= order?.userId?.phone %>
            </p>

          </div>
        </div>
        <!-- <div class="card mb-4">
          <div class="card-body">
            <h5 class="card-title">Document</h5>
            <p class="card-text">Invoice: INV-32011</p>
            <p class="card-text">Shipping: SHP-2011REQ</p>
            <p class="card-text">Rewards: 480 point</p>
          </div>
        </div> -->
      </div>
    </div>


    <section class="returnContainer card mb-4 container-sm d-flex justify-content-evenly mb-4 mt-5 ">
      <!-- return reason and image  -->
      <div class="messageBox card-body">
        <!-- display the reason for return request  -->
        <p class=" card-title ">Return Message: <br>
          <%= order.returnMsg %>
        </p>
      </div>
      <div class="imageBox card-body">
        <!-- display the images  -->
        <% order.returnImg.forEach(img=>{ %>

          <img class="m-3" height="300px" src="<%= img%>" alt="image is not available">
          <% }) %>
            <!-- <img width="300px" src="<%#= order.returnImg[0]%>" alt="image is not available">
        <img width="300px" src="<%#= order?.returnImg[1]%>" alt="image is not available">
        <img width="300px" src="<%#= order?.returnImg[2]%>" alt="image is not available"> -->
      </div>
    </section>

    <div class="card mb-4">
      <div class="card-body">
        <h5 class="card-title">Order List (+<%= order.products.length %> Orders)</h5>
        <div class="table-responsive">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              <% let total=0; %>
                <% order.products.forEach(product=> { %>
                  <tr>
                    <td>
                      <%= product.productId.name %>
                    </td>
                    <td>
                      <%= product.quantity %>
                    </td>
                    <td>₹ <%= product.price %>
                    </td>
                    <td>₹ <%= product.price * product.quantity %>
                    </td>
                    <% total +=product.price * product.quantity %>
                  </tr>
                  <% }) %>
                    <!-- <tr>
                <td>Smartwatch E2</td>
                <td>302011</td>
                <td>$590.00</td>
                <td>$590.00</td>
              </tr> -->
            </tbody>
          </table>
        </div>
        <p>Subtotal: ₹ <%= total %>
        </p>
        <p>Discount:₹ <%= order.discount %>
        </p>
        <p>
          Coupon Discount : <%= order?.couponDiscount %>
        </p>

        <p>Shipping Rate: <%= order.shippingFee || 0 %>
        </p>
        <p>Total:₹ <%= order.totalPrice %>
        </p>
      </div>
    </div>
    <!-- <button class="btn btn-outline-secondary mb-3">Print Address</button> -->
    <!-- <div class="card mb-4">
      <div class="card-body">
        <h5 class="card-title">Billing Address</h5>


        <div class="mb-3">

          <%# for (const element in order.billingAddress) {%>
            <%#=element %> : <%#= order.billingAddress[element] %>,<br>
                <%# } %>

        </div>


      </div>
    </div> -->

    <div class="card mb-4">
      <div class="card-body">
        <h5 class="card-title">Shipping Address</h5>

        <% for (const element in order.shippingAddress) {%>
          <% if(element !=="_id" && element !=="isDefault" ){%>
            <%=element %> : <%= order.shippingAddress[element] %> ,<br>
                <% } %>

                  <%} %>

      </div>
    </div>
    <!-- address end -->
  </div>


  <%- include('../adminFoot.ejs') %>

    <script>




      // validation different status (Object)
      const validTransitions = {
        "Pending": ["Shipped", "Cancelled", "Rejected"],
        "Shipped": ["Delivered", "Returned"],
        "Delivered": [],
        "Cancelled": [],
        "Rejected": [],
        "Placed": ["Shipped", "Rejected"],
        "Returned": [],
        "Return Pending": ["Return Approved", "Return Rejected"],
        "Return Approved": ["Returned"],
        "Return Rejected": []
      };

      function renderButtons() {
        const currentStatus = '<%= order?.status%>'
        console.log(currentStatus);
        const buttonsContainer = document.getElementById("buttonContainer");
        buttonsContainer.innerHTML = ""; // Clear previous buttons

        const allowedStatuses = validTransitions[currentStatus] || [];

        allowedStatuses.forEach(status => {
          const button = document.createElement("button");
          button.classList.add("btn", "btn-sm", "btn-outline-primary", "ms-3");
          button.textContent = status;
          button.onclick = () => returnController('<%= order._id %>', status);
          buttonsContainer.appendChild(button);
        });
      }
      renderButtons();

    </script>
    <script>
      // reject order 
      function changeOrder(orderId, status) {

        Swal.fire({
          title: 'Are you sure?',
          text: `You want to ${status} this order ?`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: `Yes, ${status} it!`
        }).then((data) => {
          if (data.isConfirmed) {

            fetch('/admin/orders/changeStatus/' + orderId, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ status: status }),

            })
              .then((response) => response.json())
              .then((data) => {
                console.log(data);
                if (data.success) {

                  Swal.fire({
                    title: 'Order Rejected!',
                    text: 'Your order has been rejected.',
                    icon: 'success',
                  })
                  window.location.href = "/admin/orders";
                } else {
                  Swal.fire({
                    title: 'Failed to reject order!',
                    text: data.message,
                    icon: 'error',
                  })
                }
              });
          }
        })
      }
// try{
      async function returnController(orderId, action) {
        action = (action == "Return Approved") ? "approve" : "reject";

        console.log(orderId, action);
        let data = {
          "orderId": orderId, "action": action
        }
        await fetch("/admin/return/updateStatus", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(data),
        }).then(res => res.json()).then(res => {
          if (res.success) {
            console.log("status updated : ", res);
            window.location.href = "/admin/return/";
          }
          else {
            console.log(res);
          }
        })

        // } catch (error) {
        //   console.log(" error when updating return status on order ", orderId);
        // }
      }

      // // hold order 
      // function holdOrder(orderId) {
      //   Swal.fire({
      //     title: 'Are you sure?',
      //     text: "You want to HOLD this order ?",
      //     icon: 'warning',
      //     showCancelButton: true,
      //     confirmButtonColor: '#3085d6',
      //     cancelButtonColor: '#d33',
      //     confirmButtonText: 'Yes, reject it!'
      //   }).then((data)=> {
      //     if(data.isConfirmed){
      //     fetch('/admin/orders/accept/' + orderId, {
      //       method: 'PUT',
      //     })
      //      .then((response) => response.json())
      //      .then((data) => {
      //         if (data.success) {
      //           alert("Order accepted successfully!");
      //           window.location.href = "/admin/orders";
      //         } else {
      //           alert("Failed to accept order!");
      //         }
      //       });
      //   }})
      // }

    </script>
    </body>

    </html>