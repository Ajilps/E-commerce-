<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet">
  <style>
    .payment-option {
      border: 1px solid #dee2e6;
      border-radius: 8px;
      padding: 1rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .payment-option.selected {
      border-color: #0d6efd;
      background-color: #f8f9ff;
    }

    .product-img {
      width: 60px;
      height: 60px;
      object-fit: cover;
      border-radius: 4px;
    }

    .form-check-input:checked {
      background-color: #0d6efd;
      border-color: #0d6efd;
    }

    .payment-option {
      border: 2px solid #dee2e6;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .payment-option:hover {
      border-color: #adb5bd;
    }

    .payment-option.selected {
      border-color: #0d6efd;
      background-color: #f8f9ff;
    }

    .custom-radio {
      width: 20px;
      height: 20px;
      border: 2px solid #dee2e6;
      border-radius: 50%;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      margin-left: 10px;
    }

    .custom-radio.selected {
      border-color: #0d6efd;
      background-color: #0d6efd;
    }

    .custom-radio.selected::after {
      content: '';
      width: 8px;
      height: 8px;
      background-color: white;
      border-radius: 50%;
    }

    .address-card {
      max-height: 200px;

      border: 1px solid #e0e0e0;
      border-radius: 10px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
    }

    .address-card:hover {
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    #addressForm {
      /* max-height: 300px; */
    }

    .error {
      color: red;
      font-size: 0.875rem;
      display: none;
    }
  </style>
  <style>
    .address-details {
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 20px;
      background-color: #f9f9f9;
    }

    .form-group {
      margin-bottom: 1rem;
    }

    .form-control {
      border-radius: 4px;
      border: 1px solid #ccc;
      padding: 8px;
      font-size: 14px;
    }

    .font-weight-bold {
      font-weight: 600;
    }

    .card {
      border: none;
    }

    .card-body {
      padding: 20px;
    }

    .shadow-sm {
      box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .alert {
      margin-top: 20px;
    }

    /* disable button  */
    .disabled {
      pointer-events: none;
      opacity: 0.5;
      /* Optional: Makes it look visually disabled */
    }
  </style>
  <style>
    .couponContainer {
      border-radius: 5px;
      border: solid 3px rgba(75, 2, 2, 0.199);
      padding: 10px;
    }

    #coponContainer {
      border: solid 2px rgba(116, 220, 238, 0.534);
      border-radius: 5px;
      margin: 10px 5px;
      padding: 10px;

      /* Animation properties */
      max-height: 0;
      opacity: 0;
      overflow: hidden;
      transition: max-height 0.5s ease-out, opacity 0.5s ease-out;
    }

    /* When visible */
    #coponContainer.active {
      max-height: 500px;
      /* Adjust based on content height */
      opacity: 1;
    }

    .couponText {
      color: rgb(1, 38, 87);
      font-weight: bold;
    }

    .showCoupon {
      background-color: #ccd7ec34;
      border: solid rgba(73, 205, 228, 0.521);
      border-radius: 5px;
      padding: 5px 10px;
      box-shadow: 5px 5px 10px rgba(12, 101, 235, 0.54);
      cursor: pointer;
    }

    #couponShowBtn {
      display: flex;
      justify-content: flex-end;
      margin-bottom: 10px;
    }
  </style>
</head>

<body class="bg-light">
  <%- include('../userHeader.ejs') %>
    <div class="container py-5">
      <div class="row g-4">
        <!-- Left Section: Shipping Address & Payment Options -->
        <div class="col-lg-7">
          <div class="shipping-section">
            <!-- Shipping Address -->
            <div class="d-flex justify-content-between align-items-center mb-2">
              <h5 class="mb-0 fs-6">Shipping Address</h5>
              <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#addressModal">
                <i class="bi bi-pencil"></i> Add New
              </button>
            </div>

            <div class="address-card p-3 mb-2 bg-white overflow-scroll">
              <form id="addressForm" class="needs-validation" novalidate>
                <div id="currentAddress">
                  <% if(user.addresses && user.addresses.length> 0) { %>
                    <% user.addresses.forEach(address=> { %>
                      <%# if(address.isDefault) { %>
                        <label class="w-100">
                          <input class="radio-custom" type="radio" name="address" value="<%= address._id %>"
                            <%=(address.isDefault)? 'checked' : "" %>>
                          <div class="address-details card mb-2 shadow-sm">
                            <div class="card-body p-2">
                              <div class="row g-2">
                                <p>
                                  <%= address.name %> <br>
                                    <%= address.address %> <br>
                                      <%= address.zipCode %> <br>
                                        <%= address.phone %> <br>

                                </p>
                              </div>
                            </div>
                          </div>
                          <%# } %>
                        </label>
                        <% }) %>
                          <% } else { %>
                            <div class="alert alert-warning p-2">No address found. Please add a new address.</div>
                            <% } %>
                </div>
              </form>
            </div>
            <!-- new address form start -->
            <!-- Address Edit Modal -->
            <div class="modal fade" id="addressModal" tabindex="-1">
              <div class="modal-dialog modal-lg">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title">Edit Shipping Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                  </div>
                  <div class="modal-body">
                    <form id="newAddressForm" class="needs-validation" novalidate>
                      <div class="row g-3">
                        <div class="col-12">
                          <label class="form-label">Full Name</label>
                          <input type="text" class="form-control" name="firstName" id="name" required>
                          <span class="error" id="nameError">Please enter your full
                            name</span>
                        </div>
                        <div class="col-12">
                          <label class="form-label">Address</label>
                          <textarea class="form-control" name="address" id="address" rows="3" required></textarea>
                          <span class="error" id="addressError">Please enter your
                            address</span>
                        </div>
                        <div class="col-md-6">
                          <label class="form-label">Country</label>
                          <select class="form-select" name="country" id="country" required>
                            <option value="">Select Country...</option>
                            <option value="HN">Honduras</option>
                            <option value="HU">Hungary</option>
                            <option value="IS">Iceland</option>
                            <option value="IN">India</option>
                            <option value="ID">Indonesia</option>
                            <option value="IR">Iran</option>
                            <!-- Include your country options here -->
                          </select>
                          <span class="error" id="countryError">Please select a
                            country</span>
                        </div>
                        <div class="col-md-6">
                          <label class="form-label">State/Region</label>
                          <input type="text" class="form-control" name="state" id="state" required>
                          <span class="error" id="stateError">Please enter your
                            state/region</span>
                        </div>
                        <div class="col-md-6">
                          <label class="form-label">City</label>
                          <input type="text" class="form-control" name="city" id="city" required>
                          <span class="error" id="cityError">Please enter your city</span>
                        </div>
                        <div class="col-md-6">
                          <label class="form-label">ZIP Code</label>
                          <input type="text" class="form-control" name="zipCode" id="zipCode" required>
                          <span class="error" id="zipCodeError">Please enter a valid ZIP
                            code</span>
                        </div>
                        <div class="col-md-6">
                          <label class="form-label">Email</label>
                          <input type="email" class="form-control" name="email" id="email" required>
                          <span class="error" id="emailError">Please enter a valid email
                            address</span>
                        </div>
                        <div class="col-md-6">
                          <label class="form-label">Phone Number</label>
                          <input type="tel" class="form-control" name="phone" id="phone" required>
                          <span class="error" id="phoneError">Please enter a valid phone
                            number</span>
                        </div>
                        <div>
                          <label for="isDefault"> Set this as default
                            <input type="checkbox" id="isDefault" name="isDefault" checked>
                          </label>

                        </div>
                      </div>
                    </form>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveAddress()">Use
                      This Address</button>
                  </div>
                </div>
              </div>
            </div>
            <!-- new address form end -->


            <!-- Payment Options -->
            <div class="container py-4">
              <h2 class="mb-4">Payment Option</h2>
              <p>Wallet Balance : <span id="walletBalance"></span></p>
              <div class="row g-3">
                <div id="codBtn" class="col-md-4">
                  <div class="payment-option  p-3 d-flex align-items-center justify-content-between"
                    onclick="selectPayment('COD')">
                    <span class="fw-medium">Cash on Delivery</span>
                    <div class="custom-radio"></div>
                  </div>
                </div>
                <div id="razorpayBtn" class="col-md-3">
                  <div class="selected payment-option p-3 d-flex align-items-center justify-content-between"
                    onclick="selectPayment('razorpay')">
                    <span class="fw-medium">Razorpay</span>
                    <div class="custom-radio selected"></div>
                  </div>
                </div>
                <div id="walletBtn" class="col-md-4">
                  <div id="wallet" class="payment-option p-3 d-flex align-items-center justify-content-between"
                    onclick="selectPayment('wallet')">
                    <span class="fw-medium">My Wallet </span>

                    <div class="custom-radio "></div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Additional Information -->
            <div class="card">
              <div class="card-body">
                <h5 class="mb-3">Additional Information</h5>
                <div class="mb-3">
                  <label class="form-label text-muted">Order Notes (Optional)</label>
                  <textarea id="notes" class="form-control" rows="3"
                    placeholder="Notes about your order, e.g. special notes for delivery"></textarea>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Right Section: Order Summary -->
        <div class="col-lg-5">
          <div class="card">
            <div class="card-body">
              <h5 class="mb-4">Order Summary</h5>


              <% cart.products.forEach(product=> { %>
                <% if (product.quantity !=0) { %>

                  <div class="d-flex mb-3 .cart-item">
                    <img src="<%= product.productId.productImageUrls[0] %>" alt="Product" class="product-img me-3">
                    <div class="flex-grow-1">
                      <h6 class="mb-0">
                        <%= product.productId.name %>
                      </h6>
                      <small class="text-muted">
                        <span class="quantity">
                          <%= product.quantity %>
                        </span> ×
                        <span class="price">₹ <%= product.productId.regularPrice %></span>
                      </small>
                    </div>
                  </div>
                  <!-- calculating the total and discount -->
                  <% }}); %>
                    <hr>

                    <!-- Order Details -->

                    <div class="mb-2 d-flex justify-content-between">
                      <span>Sub-total</span> <span>₹<span id="subTotal">

                        </span></span>
                    </div>
                    <div class="mb-2 d-flex justify-content-between">
                      <span>Shipping</span> <span>₹ <span class="text-success">Free</span></span>
                    </div>
                    <div class="mb-2 d-flex justify-content-between">
                      <span>Discount</span> <span>₹ -<span id="discount" class="text-success">
                          <%= %>
                        </span></span>
                    </div>
                    <!-- <div class="mb-4 d-flex justify-content-between">
                      <span>Tax</span> <span>₹ <span>
                          
                        </span></span>
                    </div> -->
                    <div class="mb-4 d-flex justify-content-between">
                      <span>Coupon</span> <span>₹ -<span class="text-success" id="couponDiscount">0</span></span>
                    </div>
                    <div class="d-flex justify-content-between mb-4">
                      <strong>Total</strong> <span>₹ <strong id="totalCost">
                          <%= %>
                        </strong></span>
                    </div>

                    <!-- Referral code -->
                    <!-- <h5>Referral Code</h5>
                    <div class="d-flex justify-content-between mb-4">
                      <div class="input-group">
                        <input name="referral" id="referralCode" type="text" class="form-control"
                          placeholder="referral Code (Optional)">
                        <button onclick="referralCheck()" class="btn btn-outline-dark">Add</button>
                        <button onclick="removeReferral()" class="btn btn-outline-dark">Clear</button>
                      </div>
                    </div> -->

                    <!-- ref end -->
                    <!-- Coupon Section -->
                    <h5>Coupon Code</h5>
                    <div class="d-flex justify-content-between mb-4">
                      <div class="input-group">
                        <input name="coupon" id="couponCode" type="text" class="form-control" placeholder="Coupon Code">
                        <button onclick="checkCoupon()" class="btn btn-outline-dark">Apply</button>
                        <button onclick="removeCoupon()" class="btn btn-outline-dark">Clear</button>
                      </div>
                    </div>


                    <div id="couponShowBtn">
                      <button id="showCouponBtn" class="showCoupon btn btn-outline-info">Show coupons</button>
                    </div>

                    <section class="container overflow-scroll" id="coponContainer">

                      <%coupons.forEach(coupon=>{ %>
                        <span class="text ">MinOrd:<%= coupon?.minPurchase %>
                        </span>
                        <span>% <%= coupon.discountValue %>
                        </span>
                        <div class="couponContainer d-flex align-items-center m-2">
                          <span class="couponText ms-2">
                            <%= coupon.code %>
                          </span>
                          <button class="ms-auto btn btn-outline-primary" onclick="copyCoupon(this)">Copy</button>
                        </div>

                        <%})%>
                          <!-- <div class="couponContainer d-flex align-items-center m-2">
                            <span class="couponText ms-2">DISCOUNT50</span>
                            <button class="ms-auto btn btn-outline-primary" onclick="copyCoupon(this)">Copy</button>
                          </div>
                          <div class="couponContainer d-flex align-items-center m-2">
                            <span class="couponText ms-2">SAVE20</span>
                            <button class="ms-auto btn btn-outline-primary" onclick="copyCoupon(this)">Copy</button>
                          </div> -->
                    </section>




                    <!-- Place Order Button -->
                    <button id="placeOrderBtn" class="btn btn-info w-100">Place Order</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <%- include('../userFooter.ejs') %>
      <script src="/script/user/productSearch.js"></script>
      <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

      <script>
        let subTotal = 0, shipping = 0, discount = 0, tax = 0, total = 0;
        let cart = {};
        let shippingAddress = {};
        let billingAddress = {};
        let walletBalance = 0;
        let paymentMethod = 'razorpay';
        const walletBtn = document.getElementById("walletBtn");
        const razorpayBtn = document.getElementById("razorpayBtn");
        const codBtn = document.getElementById("codBtn");
        const walletBalanceSpan = document.getElementById("walletBalance");

        async function getcart() {
          return fetch("/user/orders/getart")
            .then((res) => res.json())
            .then((res) => {
              if (res.success) {
                return res;
              }
              else {
                getcart();
              }
            })
        }
        function roundPrice(price) {
          return Math.round(price * 100) / 100;
        }

        async function calculateOrderSummary() {
          try {
            getcart().then(res => {
              cart = res.cart;
              return cart;
            }).then(async (cart) => {
              subTotal = 0;
              shipping = 0, discount = 0, tax = 0, total = 0;
              console.log(cart.products);
              cart.products.forEach(product => {
                subTotal += product.productId.regularPrice
                discount += product.productId.regularPrice - product.productId.sellingPrice
                total += (subTotal - discount);
              })
              subTotal = roundPrice(subTotal);
              discount = roundPrice(discount);
              total = roundPrice(total);
              document.getElementById("subTotal").innerText = subTotal;
              document.getElementById("discount").innerText = discount;
              document.getElementById("totalCost").innerText = total;

              // after calculation if the total is grater than 1000 disable the COD button 
              // also if the total value grater than wallet balance disable the wallet option too.

              //     // Fetch wallet balance from the server
              const response = await fetch("/user/wallet/balance");
              if (!response.ok) {
                throw new Error(`Failed to fetch wallet balance: ${response.statusText}`);
              }
              const res = await response.json();

              // Validate the response
              walletBalance = parseFloat(res.balance);
              walletBalanceSpan.innerText = walletBalance;

              if (walletBalance < total) {
                walletBtn.classList.add("disabled")
              }
              if (total > 1000) {
                codBtn.classList.add("disabled")
              }

            }).catch(err => {
              console.log(err)
            });
            return true;
          } catch (error) {

          }

        }

        window.addEventListener("load", (event) => {
          calculateOrderSummary();
        });




      </script>

      <script>
        // Toggle coupon container visibility with smooth animation
        document.getElementById('showCouponBtn').addEventListener('click', function () {
          const couponContainer = document.getElementById('coponContainer');
          couponContainer.classList.toggle('active');
          this.innerText = couponContainer.classList.contains('active') ? 'Close' : 'Show coupons';
        });

        // Copy coupon text
        function copyCoupon(button) {
          const couponText = button.previousElementSibling.innerText;
          navigator.clipboard.writeText(couponText).then(() => {

          }).catch(err => {

          });
        }
      </script>

      <script>


        //payment option selection function 
        async function selectPayment(option) {
          // Remove selected class from all options
          document.querySelectorAll('.payment-option').forEach(el => {
            el.classList.remove('selected');
            el.querySelector('.custom-radio').classList.remove('selected');
          });

          // Add selected class to clicked option
          const selectedOption = document.querySelector(`[onclick="selectPayment('${option}')"]`);
          selectedOption.classList.add('selected');
          selectedOption.querySelector('.custom-radio').classList.add('selected');
          console.log(option);
          paymentMethod = option;
        }
      </script>

      <script>
        let validatedCoupon = "";
        let couponRedeemed = false;
        let couponDiscountAmount = 0;

        function checkCoupon() {
          const couponCode = document.getElementById('couponCode').value;
          console.log(couponCode)
          if (couponRedeemed != couponCode) {
            validateCoupon(couponCode);
          }
          else {
            Swal.fire({
              title: 'Coupon Already Redeemed',
              text: 'You have already redeemed this coupon.',
              icon: 'error',
              confirmButtonText: 'Okay'
            });

          }
        }
        // function for checking the coupon validation and applying 
        let couponDiscount = document.getElementById('couponDiscount');
        const totalCost = document.getElementById('totalCost');


        async function validateCoupon(couponCode) {

          try {
            console.log(couponDiscount.innerText)
            await fetch('/user/coupon/validateCoupon', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ couponCode })
            }).then(response => response.json()).then(data => {
              if (data.success) {
                console.log(data.data._id); //  testing 
                couponDiscountAmount = roundPrice((Number(totalCost.innerText) * Number(data.data.discountValue) / 100))
                couponDiscountAmount = (couponDiscountAmount < data.data.maxDiscount) ? couponDiscountAmount : data.data.maxDiscount;
                couponDiscount.innerText = couponDiscountAmount;
                totalCost.innerText = roundPrice(Number(totalCost.innerText) - Number(couponDiscountAmount));
                validatedCoupon = data.data._id;
                couponRedeemed = data.data.code;
                couponDiscountAmount = couponDiscountAmount;
                console.log("coupon discount amount after: ", couponDiscountAmount);

                // If the final amount after adding the coupon is less than 1000 then enable the COD button 
                // if the total is less than the wallet balance then enable the wallet button 
                if (total - Number(couponDiscountAmount) < 1000) {
                  codBtn.classList.remove("disabled")
                }
                if (total - Number(couponDiscountAmount) < walletBalance) {
                  walletBtn.classList.remove("disabled")
                } else {
                  walletBtn.classList.add("disabled")
                  codBtn.classList.add("disabled")
                }

              } else {
                Swal.fire({
                  title: 'Coupon Validation Failed',
                  text: data.message,
                  icon: 'error',
                  confirmButtonText: 'Try Again'
                });
                document.getElementById('couponCode').value = ""
              }
            });

            return null;
          } catch (error) {
            console.log(error);
          }

        }
        //remove the coupon and change the values to previous state 
        async function removeCoupon() {
          try {

            if (couponRedeemed != "") {
              couponDiscount.innerText = 0;
              couponRedeemed = "";
              calculateOrderSummary();
            }

          } catch (error) {
            console.error(error);
          }
        }


        // save new address and rerender the address field  
        async function saveAddress() {
          const form = document.getElementById('newAddressForm');
          const formData = new FormData(form);
          const data = Object.fromEntries(formData);

          // for (const [key, value] of formData.entries()) {
          //   console.log(`${key}: ${value}`);
          // }
          // console.log(Object.fromEntries(formData))
          // Validate form
          if (!validateForm()) {
            return;
          }
          // billingAddress = data;
          // shippingAddress = data;
          // saving the new address to the server and display the new address as default 
          await fetch("/user/shippingAddress/addAddress", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
          }).then(res => res.json()).then(res => {
            if (!res.success) {

              Swal.fire({
                title: 'Process Failed',
                text: res.message,
                icon: 'error',
                confirmButtonText: 'Try Again'
              });
              // Close the modal
              const modal = bootstrap.Modal.getInstance(document.getElementById('addressModal'));
              modal.hide();
              return
            }
            // console.log(res);
            // console.log("User form address response :", res?.user);

            let user = res?.user;

            // Update the current address display
            const currentAddress = document.getElementById('currentAddress');
            currentAddress.innerHTML = user.addresses.map(address => `
                  <label class="w-100">
                      <input class="radio-custom" type="radio" name="address" value="${address._id}"
                          ${address.isDefault ? 'checked' : ''}>
                      <div class="address-details card mb-2 shadow-sm">
                          <div class="card-body p-2">
                              <div class="row g-2">
                                  <p>
                                      ${address.name} <br>
                                      ${address.address} <br>
                                      ${address.zipCode} <br>
                                      ${address.phone} <br>
                                  </p>
                              </div>
                          </div>
                      </div>
                  </label>
              `).join('');

          }).then(() => {

            // Close the modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('addressModal'));
            modal.hide();

          }).catch(err => {
            console.log(err);
          })
        }

        // place order
        const placeOrderBtn = document.querySelector('#placeOrderBtn');
        placeOrderBtn.addEventListener('click', () => {
          // validate form
          // address



          // payment option
          // additional information
          // submit form
          const notes = document.getElementById('notes').value;

          const subTotal = document.getElementById("subTotal").innerText;

          if (!validateForm()) return;
          const form = document.getElementById('addressForm');
          const formData = new FormData(form);
          const AddressData = Object.fromEntries(formData) || shippingAddress;
          console.log(AddressData)
          // const paymentMethod = document.querySelectorAll("")
          // const coupon = document.getElementById("coupon").value
          // const addressForm = document.getElementById('addressForm');
          // addressForm.reset();
          // const formDAta = new FormData(addressForm)
          // console.log(notes)

          fetch('/user/order/placeOrder', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              products: `<%= JSON.stringify(cart.products) %>`,
              subTotal: subTotal,
              total: totalCost.innerText,
              discount: discount,
              tax: 0,
              shipping: 0,
              couponDiscount: couponDiscountAmount,
              paymentMethod: paymentMethod,
              notes,
              address: AddressData,
              coupon: validatedCoupon,
            })
          }).then(response => response.json())
            .then(async response => {
              if (paymentMethod == 'razorpay') {
                if (response.success) {
                  console.log(response)
                  console.log(response.razorpayOrder.id)// testing 
                  let paymentStatus = false;
                  const options = {
                    key: '<%= process.env.RAZORPAY_KEY_ID %>',
                    amount: response.razorpayOrder.amount,
                    currency: response.currency,
                    name: 'Bytez',
                    order_id: response.razorpayOrder.id,
                    handler: function (paymentResponse) {
                      paymentStatus = true;
                      console.log('Payment Response:', paymentResponse);
                      // Place order after successful payment
                      fetch('/user/orders/confirm-payment', {
                        method: "POST",
                        headers: {

                          "Content-Type": "application/json",
                        },
                        body: JSON.stringify({

                          paymentMethod: 'razorpay',
                          razorpayPaymentId: paymentResponse.razorpay_payment_id,
                          razorpayOrderId: paymentResponse.razorpay_order_id,
                          razorpaySignature: paymentResponse.razorpay_signature,
                          paymentStatus: true,
                        })
                      }).then(res => res.json())
                        .then(res => {
                          console.log(res);
                          if (res.success) {
                            Swal.fire({
                              title: 'Order Confirmed',
                              text: res.message,
                              icon: 'success',
                              confirmButtonText: 'Okay'
                            }).then(() => {
                              window.location.href = '/user/orders';
                            });
                          } else {
                            Swal.fire({
                              title: 'Failed to Confirm Order',
                              text: res.message,
                              icon: 'error',
                              confirmButtonText: 'Okay'
                            });
                          }
                        }).catch(err => {
                          console.log(err)
                          Swal.fire({
                            title: 'Failed to Place Order',
                            text: err.message,
                            icon: 'error',
                            confirmButtonText: 'Okay'
                          }).then(() => {
                            window.location.href = '/user/cart';
                          })

                        })


                    },
                    theme: {
                      color: '#000000'
                    },
                    modal: {
                      ondismiss: function () {
                        console.log('Payment canceled');
                        Swal.fire({
                          title: 'Payment Canceled',
                          text: 'Your payment was canceled. Would you like to retry?',
                          icon: 'warning',
                          showCancelButton: true,
                          confirmButtonColor: '#3085d6',
                          cancelButtonColor: '#d33',
                          confirmButtonText: 'Retry',
                          cancelButtonText: 'Cancel'
                        }).then((result) => {
                          if (result.isConfirmed) {
                            // Retry the payment
                            const razorpay = new Razorpay(options);
                            razorpay.open();
                          } else {
                            // Cancel the order or redirect to a different page
                            Swal.fire({
                              title: 'Order Placed ',
                              text: 'Your order has been placed payment is pending !!',
                              icon: 'info',
                              confirmButtonText: 'Okay'
                            }).then(() => {
                              window.location.href = '/user/orders'; // Redirect to cart or another page
                            });
                          }
                        });
                      }
                    }
                  };

                  const razorpay = new Razorpay(options);
                  let paymentResult = await razorpay.open()


                } else {
                  Swal.fire({
                    title: 'Oops...',
                    text: `${response.message}`,
                    icon: 'error',
                    confirmButtonText: 'Cool'
                  }).then(() => {
                    window.location.href = '/user/cart';
                  });
                }
              } else if (paymentMethod == 'wallet') { // if the payment is using wallet 
                if (response.success) {
                  Swal.fire({
                    title: 'Sweet!',
                    text: 'Order placed successfully !',
                    icon: 'success',
                    confirmButtonText: 'Cool'
                  }).then(() => {
                    window.location.href = '/user/orders';
                  });
                } else {
                  Swal.fire({
                    title: 'Oops...',
                    text: response.message,
                    icon: 'error',
                    confirmButtonText: 'Cool'
                  }).then(() => {
                    window.location.href = '/user/cart';
                  });;
                }

                console.log(response);
              }
              else {
                if (response.success) {
                  Swal.fire({
                    title: 'Sweet!',
                    text: 'Order placed successfully !',
                    icon: 'success',
                    confirmButtonText: 'Cool'
                  }).then(() => {
                    window.location.href = '/user/orders';
                  });
                } else {
                  Swal.fire({
                    title: 'Oops...',
                    text: response.message,
                    icon: 'error',
                    confirmButtonText: 'Cool'
                  }).then(() => {
                    window.location.href = '/user/cart';
                  });;
                }
              }
            })


        });


        //form validation form 
        function validateForm() {
          const form = document.getElementById('addressForm');
          const inputs = form.querySelectorAll('input, select, textarea');
          let isValid = true;

          inputs.forEach(input => {
            if (!input.value) {
              isValid = false;
              const errorSpan = document.getElementById(`${input.id}Error`);
              if (errorSpan) {
                errorSpan.style.display = 'block';
              }
            } else {
              const errorSpan = document.getElementById(`${input.id}Error`);
              if (errorSpan) {
                errorSpan.style.display = 'none';
              }
            }
          });

          return isValid;
        }

        // Add event listeners for form validation
        document.addEventListener('DOMContentLoaded', function () {
          const inputs = document.querySelectorAll('input, select, textarea');
          inputs.forEach(input => {
            input.addEventListener('input', function () {
              const errorSpan = document.getElementById(`${this.id}Error`);
              if (errorSpan) {
                errorSpan.style.display = this.value ? 'none' : 'block';
              }
            });
          });
        });

      </script>

      <script>
        //clearing the apply coupon
        function clearCoupon(coupon) {
          console.log(coupon)
        }
      </script>
</body>

</html>