<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
</head>

<body>
  <%- include('../userHeader.ejs')%>
    <div class="container my-5">
      <section class="breadcrumb">
        <span class="breadcrumb-item"> <a class="breadcrumb-item text text-primary text " href="/user/orders">Orders</a>
          /
          Order Details </span>
      </section>
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Order Details</h1>
        <div>
          <!-- <button class="btn btn-primary me-2">+ Add Order</button> -->
          <% if(order.status !="Cancelled" && order.status !="Rejected" ){ %>
            <button id="cancelOrder" onclick="cancelOrder( '<%= order._id %>')" orderId="<%= order._id %>"
              class="btn btn-outline-danger">Cancel</button>
            <% } %>
        </div>
      </div>

      <div class="row">
        <div class="col-md-6">
          <div class="card mb-4">
            <div class="card-body">
              <h5 class="card-title">Order: <%= order.orderId %>
              </h5>

              <% let date=new Date(order.createdAt) %>

                <p>
                  <%= `${date.getDate()}/${date.toLocaleString('default', { month: 'short' })} / ${date.getFullYear() }`
                    %>
                </p>

                <!-- <p class="card-text">Order Placed: <%#= order.createdAt %></p> -->
                <p class="card-text ">Payment Status:
                  <span class="badge 
              <% if (order.paymentStatus === 'Pending') { %>bg-warning<% } %>
              <% if (order.paymentStatus === 'Processing') { %>bg-info<% } %>
              <% if (order.paymentStatus === 'Shipped') { %>bg-primary<% } %>
              <% if (order.paymentStatus === 'Paid') { %>bg-success<% } %>
              <% if (order.paymentStatus === 'Placed') { %>bg-success<% } %>
              <% if (order.paymentStatus === 'Pending') { %>bg-danger<% } %>
              <% if (order.paymentStatus === 'Cancelled') { %>bg-danger<% } %>
            ">
                    <%= order.paymentStatus %>
                  </span>
                  <% if( order.paymentStatus==="Pending" ){ %>

                    <button onclick="makePayment('<%= order.orderId%>')" class="btn btn-outline-primary"> Make
                      payment</button>

                    <% } %>
                </p>
                <p>Payment method : <span>
                    <%= order.paymentMethod %>
                  </span></p>
                <p>Discount : <span>
                    <%= order.discount %>
                  </span></p>
                <% if(order.deliveryDate){ %>
                  <% let date=new Date(order?.deliveryDate) %>

                    <p class="card-text">
                      Expected Arrival:
                      <%= `${date.getDate()}/${date.toLocaleString('default', { month: 'short' })} /
                        ${date.getFullYear() }` || 0 %>
                    </p>
                    <% } %>
                      <span> including 18% tax</span>
                      <p class=" card-text badge bg-info">Total: ₹<%= order.totalPrice %>
                      </p>
            </div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="card mb-4">
            <div class="card-body">
              <h5 class="card-title">Products </h5>
              <div class="table-responsive">
                <table class="table table-hover">
                  <thead>
                    <tr>
                      <th>Product</th>
                      <th>Price</th>
                      <th>Quantity</th>
                      <th>Subtotal</th>
                    </tr>
                  </thead>
                  <tbody>
                    <%#orders.forEach(order=>{ %>
                      <p>
                        <%#= order._id %>
                      </p>
                      <% order.products.forEach(product=>{ %>

                        <tr>
                          <td>
                            <%= product.productId.name %>
                          </td>
                          <td>₹<%= product.price %>/-</td>
                          <td>
                            <%= product.quantity %>
                          </td>
                          <td>₹<%= ( product.price * product.quantity) %>/-</td>
                        </tr>
                        <!-- <tr>
                    <td>Google Pixel 6 Pro - Crystal Clear Phone Case with 12ft Anti Drop</td>
                    <td>₹300</td>
                    <td>1</td>
                    <td>₹300</td>
                  </tr> -->
                        <% }) %>
                          <%# }) %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
          <!-- <div class="card mb-4">
          <div class="card-body">
            <h5 class="card-title">Order Activity</h5>
            <ul class="list-group list-group-flush">
              <li class="list-group-item">Order Placed: 17 Jan, 2023 at 7:38 PM</li>
              <li class="list-group-item">Packaging: 19 Jan, 2023 at 8:00 AM</li>
              <li class="list-group-item">On The Road: 21 Jan, 2023 at 8:00 AM</li>
              <li class="list-group-item">Delivered: 23 Jan, 2023 at 7:38 PM</li>
              <li class="list-group-item">Order Confirmed: 23 Jan, 2023 at 2:21 PM</li>
            </ul>
          </div>
        </div> -->
        </div>
      </div>

      <div class="card mb-4">
        <div class="card-body">
          <h5 class="card-title">Billing Address</h5>


          <div class="mb-3">

            <% for (const element in order.billingAddress) {%>
              <%=element %> : <%= order.billingAddress[element] %><br>
                  <% } %>,

          </div>


        </div>
      </div>

      <div class="card mb-4">
        <div class="card-body">
          <h5 class="card-title">Shipping Address</h5>
          <span>
            <%= order %>
          </span>
          <% for (const element in order.shippingAddress) {%>
            <%=element %> : <%= order.shippingAddress[element] %><br>
                <% } %>,

        </div>
      </div>

      <div class="card mb-4">
        <div class="card-body">
          <h5 class="card-title">Order Notes</h5>
          <p>
            <%= (order.orderNotes)? order.orderNotes : " No instructions " %>
          </p>
        </div>
      </div>
    </div>

    <%- include('../userFooter.ejs') %>
      <script src="/script/user/productSearch.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
      <script src="https://checkout.razorpay.com/v1/checkout.js"></script>


      <script>
        // cancel order function 
        function cancelOrder(orderId) {
          Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, cancel it!'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/user/orders/cancel/${orderId}`, {
                method: 'PATCH'
              })
                .then(data => {
                  if (data.success) {
                    console.log(data)
                    Swal.fire('Order Cancelled!',
                      'Your order has been cancelled.',
                      ` ${data?.paymentStatus || ""}`,
                      'success');
                    window.location.href = '/user/orders';
                  } else {
                    Swal.fire('Error!', 'Something went wrong.', 'error');
                  }
                })
                .catch(error => {
                  console.log(error);
                });
              // Swal.fire('Deleted!', 'Your file has been deleted.','success');
              window.location.href = '/user/orders';
            }
            // else if (result.dismiss === Swal.DismissReason.cancel) {
            //   Swal.fire('Cancelled', 'Your order is safe.', 'error');
            // }
          });
        }

        //make the payment 
        // send a get request with order id 
        async function makePayment(orderId) {
          console.log(orderId);
          fetch(`/user/orders/retryPayment`, {
            method: "POST",
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ "orderId": orderId }),
          })
            .then((res) => {
              return res.json();
            }).then(async (response) => {
              if (response.success) {
                console.log(response)
                console.log(response.razorpayOrder.id)// testing 
                let paymentStatus = false;
                const options = {
                  key: '<%= process.env.RAZORPAY_KEY_ID %>',
                  amount: response.razorpayOrder.amount,
                  currency: response.currency,
                  name: 'Bytez',
                  order_id: response.razorpayOrder.id,
                  handler: function (paymentResponse) {
                    paymentStatus = true;
                    console.log('Payment Response:', paymentResponse);
                    // Place order after successful payment
                    fetch('/user/orders/verifyPayment', {
                      method: "POST",
                      headers: {

                        "Content-Type": "application/json",
                      },
                      body: JSON.stringify({

                        paymentMethod: 'razorpay',
                        razorpayPaymentId: paymentResponse.razorpay_payment_id,
                        razorpayOrderId: paymentResponse.razorpay_order_id,
                        razorpaySignature: paymentResponse.razorpay_signature,
                        paymentStatus: true,
                      })
                    }).then(res => res.json())
                      .then(res => {
                        console.log(res);
                        if (res.success) {
                          Swal.fire({
                            title: 'Order Confirmed',
                            text: res.message,
                            icon: 'success',
                            confirmButtonText: 'Okay'
                          }).then(() => {
                            window.location.href = '/user/orders';
                          });
                        } else {
                          Swal.fire({
                            title: 'Failed to Confirm Order',
                            text: res.message,
                            icon: 'error',
                            confirmButtonText: 'Okay'
                          });
                        }
                      }).catch(err => {
                        console.log(err)
                        Swal.fire({
                          title: 'Failed to Place Order',
                          text: err.message,
                          icon: 'error',
                          confirmButtonText: 'Okay'
                        }).then(() => {
                          window.location.href = '/user/orders';
                        })

                      })


                  },
                  theme: {
                    color: '#000000'
                  },
                  modal: {
                    ondismiss: function () {
                      console.log('Payment canceled');
                      Swal.fire({
                        title: 'Payment Canceled',
                        text: 'Your payment was canceled. Would you like to retry?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Retry',
                        cancelButtonText: 'Cancel'
                      }).then((result) => {
                        if (result.isConfirmed) {
                          // Retry the payment
                          const razorpay = new Razorpay(options);
                          razorpay.open();
                        } else {
                          // Cancel the order or redirect to a different page
                          Swal.fire({
                            title: 'Order Placed ',
                            text: 'Your Payment has been canceled !!',
                            icon: 'info',
                            confirmButtonText: 'Okay'
                          }).then(() => {
                            window.location.href = '/user/orders'; // Redirect to cart or another page
                          });
                        }
                      });
                    }
                  }
                };

                const razorpay = new Razorpay(options);
                let paymentResult = await razorpay.open()


              } else {
                Swal.fire({
                  title: 'Oops...',
                  text: `${data.message}`,
                  icon: 'error',
                  confirmButtonText: 'Cool'
                }).then(() => {
                  window.location.href = '/user/cart';
                });
              }
            }
            )

        }
      </script>
</body>

</html>