<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">

  <!-- Animate.css for animations -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet">



</head>

<body>
  <%- include('../userHeader.ejs')%>
    <div class="container my-5">
      <section class="breadcrumb">
        <span class="breadcrumb-item"> <a class="breadcrumb-item text text-primary text " href="/user/orders">Orders</a>
          /
          Order Details </span>
      </section>
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>Order Details</h1>
        <div>
          <!-- <button class="btn btn-primary me-2">+ Add Order</button> -->
          <!-- <%# if(order.status !="Cancelled" || order.status !="Rejected" || order.status !="Delivered" || order.status !="Return Pending"  ){ %> -->
          <% if(order.status=="Pending" || order.status=="Placed" ){ %>
            <button id="cancelOrder" onclick="cancelOrder( '<%= order._id %>')" orderId="<%= order._id %>"
              class="btn btn-outline-danger">Cancel</button>
            <% } %>
              <% if(order.status=="Delivered" ) {%>
                <!-- invoice button  -->
                <a href="/user/order/downloadInvoice?orderId=<%= order._id %>">
                  <button onclick="downloadInvoice('<%= order._id %>')" id="downloadInvoice" orderId="<%= order._id %>"
                    class="btn btn-outline-info">Download
                    Invoice</button></a>
                <!-- return button display only if the status is Delivered and the it should not display after 10 days of delivery -->


                <% } %>
                  <% if(order.status=="Delivered" && order?.retReject==false ) {%>
                    <button id="openModal" onclick="returnOrder('<%= order._id%>',event)"
                      class="btn btn-outline-warning text-danger ms-1">
                      Return
                    </button>
                    <% } %>
        </div>

      </div>
      <style>
        .returnFormContainer {

          background-color: rgba(170, 240, 240, 0.973);

          z-index: 2;
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          padding: 10px;
          display: grid;
          border: solid 1px rgba(255, 0, 0, 0.5);
          border-radius: 8px;
          justify-items: center;
          box-shadow: 10px 10px 18px;


        }

        .form-items {
          margin: 5px;
          /* justify-items: center; */
          justify-content: space-between;
          padding-left: 5px;
        }

        .form-items button {
          border: solid rgba(154, 75, 219, 0.705) 1px;
          box-shadow: 10px 10px 15px rgba(171, 91, 236, 0.568);
          margin: 10px;


        }

        .form-items h4 {
          color: rgba(160, 38, 38, 0.856);
          text-align: center;
        }

        .loader {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(0, 0, 0, 0.1);
          border-top: 5px solid #3498db;

          border-radius: 50%;
          animation: spin 1s linear infinite;
        }


        @keyframes spin {
          0% {
            transform: rotate(0deg);
          }

          100% {
            transform: rotate(360deg);
          }
        }

        #blurBackground {
          position: fixed;
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          height: 100vh;
          width: 100%;
          background: linear-gradient(45deg, rgba(240, 232, 232, 0.781)1%rgba(183, 183, 245, 0.781) 3%);
          background-color: rgba(238, 227, 227, 0.459);
          z-index: 1;
        }

        #loadingWindow {

          position: fixed;

          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          height: 100vh;
          width: 100%;

          background-color: rgba(237, 239, 241, 0.445);
          z-index: 3;
          display: flex;
          justify-content: center;
          align-items: center;
        }

        .error {
          color: red;

        }


        .hide {
          display: none !important;
        }
      </style>
      <!-- background blur window  -->
      <section class="hide" id="blurBackground"></section>
      <!-- loading window -->
      <section class="hide" id="loadingWindow">
        <div class="loader"></div>
      </section>

      <section class="hide returnFormContainer">
        <form id="returnForm">
          <div class="form-items">
            <div>
              <h4>Return Request </h4>
            </div>
            <span class="text"> Order: <big>
                <%= order.orderId %>
              </big></span> <br>
            <label for="reason" class="form-label">Enter your Reason</label>
            <input class="form-control" list="reasons" name="reason" type="text" id="reason"
              placeholder="Reason for return">
            <div class="error hide" id="reasonError"><span>Enter a Response </span></div>
            <datalist id="reasons">
              <option value="Damaged Product">
              <option value="Not satisfied">

            </datalist>

            <!-- <label for="email" class="form-label"> Email </label>
            <input type="email" class="form-control" name="email" placeholder="Email">
            <div class="error hide" id="emailError"><span>Enter a valid email </span></div>

            <label for="number" class="form-label"> number </label>
            <input type="number" class="form-control" name="number" placeholder="number">
            <div class="error hide" id="numberError"><span>Enter a valid number </span></div> -->

            <label for="file" class="form-label"> Images (Max-3 files)</label>
            <input id="images" type="file" class="form-control" name="file" placeholder="file" accept="image/*"
              multiple>
            <div class="error hide" id="imageError"><span>Minimum 1 image and Maximum 3 images allowed </span></div>

          </div>
          <div class="form-items">
            <button class="btn" type="submit">
              submit
            </button>
            <button class="btn" type="reset">
              cancel
            </button>
          </div>
        </form>
      </section>



      <div class="row">
        <div class="col-md-6">
          <div class="card mb-4">
            <div class="card-body">
              <h5 class="card-title">Order ID: <%= order.orderId %>
              </h5>

              <% let date=new Date(order.createdAt) %>

                <p>
                  <%= `${date.getDate()}/${date.toLocaleString('default', { month: 'short' })} / ${date.getFullYear() }`
                    %>
                </p>

                <!-- <p class="card-text">Order Placed: <%#= order.createdAt %></p> -->
                <p class="card-text ">Payment Status:
                  <span class="badge text-black
              <% if (order.paymentStatus === 'Pending') { %>bg-warning<% } %>
              <% if (order.paymentStatus === 'Processing') { %>bg-info<% } %>
              <% if (order.paymentStatus === 'Shipped') { %>bg-primary<% } %>
              <% if (order.paymentStatus === 'Paid') { %>bg-success<% } %>
              <% if (order.paymentStatus === 'Placed') { %>bg-success<% } %>
              <% if (order.paymentStatus === 'Pending') { %>bg-danger<% } %>
              <% if (order.paymentStatus === 'Cancelled') { %>bg-danger<% } %>
            ">
                    <%= order.paymentStatus %>
                  </span>
                  <% if( order.paymentStatus==="Pending" ){ %>

                    <button onclick="makePayment('<%= order.orderId%>')" class="btn btn-outline-primary"> Make
                      payment</button>

                    <% } %>
                </p>
                <p>Payment method : <span>
                    <%= order.paymentMethod %>
                  </span></p>
                <p>Discount : -<span>
                    <%= order.discount %>
                  </span></p>
                <p>Coupon Discount : -<span>
                    <%= order.couponDiscount %>
                  </span></p>
                <% if(order.deliveryDate && order.status !=='Rejected' && order.status!=='Cancelled' ){ %>
                  <% let date=new Date(order?.deliveryDate) %>
                    <!-- if the status is shipped  -->
                    <% if(order.status=="Shipped" ){ %>
                      <p class="card-text">
                        Expected Arrival:
                        <%= `${date.getDate()}/${date.toLocaleString('default', { month: 'short' })} /
                          ${date.getFullYear() }` || 0 %>
                      </p>
                      <% } %>
                        <!--if the status is return approved then show return date   -->
                        <% if(order.status=="Return Approved" ) {%>
                          <% let returnDate=new Date(order?.returnDate) %>
                            <p class="card-text">
                              Expected return date :
                              <%= `${returnDate.getDate()}/${returnDate.toLocaleString('default', { month: 'short' })} /
                                ${returnDate.getFullYear() }` || 0 %>
                            </p>
                            <% } %>
                              <% } %>
                                <span> Total: </span>
                                <p class=" card-text text-black badge bg-info">Total: ₹<%= order.totalPrice %>
                                </p>
            </div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="card mb-4">
            <div class="card-body">
              <h5 class="card-title">Products </h5>
              <div class="table-responsive">
                <table class="table table-hover">
                  <thead>
                    <tr>
                      <th>Product</th>
                      <th>Price</th>
                      <th>Quantity</th>
                      <th>Subtotal</th>
                    </tr>
                  </thead>
                  <tbody>
                    <%#orders.forEach(order=>{ %>
                      <p>
                        <%#= order._id %>
                      </p>
                      <% function roundPrice(price) { return Math.round(price * 100) / 100; } %>
                        <% order.products.forEach(product=>{ %>

                          <tr>
                            <td>
                              <%= product.productId.name %>
                            </td>
                            <td>₹<%= product.price %>/-</td>
                            <td>
                              <%= product.quantity %>
                            </td>
                            <td>₹<%= roundPrice( product.price * product.quantity) %>/-</td>
                          </tr>

                          <% }) %>
                            <%# }) %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>

        </div>
      </div>

      <div class="card mb-4">
        <div class="card-body">
          <h5 class="card-title">Shipping Address</h5>


          <div class="mb-3">


            <span>name: <%= order?.billingAddress?.name %></span> <br>
            <span>address: <%= order?.billingAddress?.address %></span><br>
            <span>Phone: <%= order?.billingAddress?.phone %></span><br>
            <span>email: <%= order?.billingAddress?.email %></span><br>
            <span>zip Code: <%= order?.billingAddress?.zipCode %></span><br>

          </div>


        </div>
      </div>



      <div class="card mb-4">
        <div class="card-body">
          <h5 class="card-title">Order Notes</h5>
          <p>
            <%= (order.orderNotes)? order.orderNotes : " No instructions " %>
          </p>
        </div>
      </div>
    </div>





    <%- include('../userFooter.ejs') %>
      <script src="/script/user/productSearch.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
      <script src="https://checkout.razorpay.com/v1/checkout.js"></script>




      <script>
        const returnFormContainer = document.querySelector(".returnFormContainer");
        const blurBackground = document.querySelector("#blurBackground");
        const returnForm = document.getElementById("returnForm");
        const loadingWindow = document.getElementById("loadingWindow");

        async function returnOrder(orderId, event) {
          try {
            returnFormContainer.classList.remove("hide");
            blurBackground.classList.remove("hide");

            // adding a event listener for form submission and call validation function 
            returnForm.addEventListener("submit", async (event) => {
              event.preventDefault();
              event.stopPropagation();

              let validate = validateForm(returnForm);

              if (validate) {
                // send the form data to server 
                console.log("sending form data to server ");
                loadingWindow.classList.remove("hide");
                //   const inputs = returnForm.querySelectorAll("input");

                //   inputs.forEach(input => {
                //     console.log(input.type);
                //   })
                const formData = new FormData(returnForm);
                formData.append("orderId", orderId)
                await fetch("/user/order/return", {
                  method: "POST",
                  body: formData
                }).then(res => res.json()).then(res => {

                  if (res.success) {
                    loadingWindow.classList.add("hide");
                    console.log("request submitted ")
                    window.location.reload();
                  }
                  else {

                    console.log("request not submitted ")
                  }
                })
              }

            })

            // adding a event listener for reset form and clear the files 
            returnForm.addEventListener("reset", (e) => {
              e.preventDefault();

              returnFormContainer.classList.add("hide");
              blurBackground.classList.add("hide");
              document.getElementById("images").value = "";

            })

            console.log(orderId);
          } catch (error) {

          }
        }
        // adding event listener for checking the image file limit 
        document.getElementById("images").addEventListener("change", function (e) {
          e.preventDefault();
          document.getElementById("imageError").classList.add("hide");

          if (this.files.length > 3) {
            console.log("display error message max limit is 3")
            document.getElementById("imageError").classList.remove("hide");
            this.value = "";
          }

        })


        function validateForm() {
          let valid = true;
          document.getElementById("reasonError").classList.add("hide");
          const regex = /^[A-Za-z.,\s]+$/;
          const reason = document.getElementById("reason").value.trim();
          if (!regex.test(reason)) {
            document.getElementById("reasonError").classList.remove("hide");
            valid = false;
          }

          const files = document.getElementById("images");
          document.getElementById("imageError").classList.add("hide");
          if (files.files.length == 0 || files.files.length > 3) {
            document.getElementById("imageError").classList.remove("hide");
            console.log("image validation testing ")
            valid = false
          }
          return valid;

        }
      </script>
      <script>
        // cancel order function 
        function cancelOrder(orderId) {
          Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, cancel it!'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/user/orders/cancel/${orderId}`, {
                method: 'PATCH'
              })
                .then(data => {
                  if (data.success) {
                    console.log(data)
                    Swal.fire('Order Cancelled!',
                      'Your order has been cancelled.',
                      ` ${data?.paymentStatus || ""}`,
                      'success');
                    window.location.href = '/user/orders';
                  } else {
                    Swal.fire('Error!', 'Something went wrong.', 'error');
                  }
                })
                .catch(error => {
                  console.log(error);
                });
              // Swal.fire('Deleted!', 'Your file has been deleted.','success');
              window.location.href = '/user/orders';
            }

          });
        }

        //make the payment 
        // send a get request with order id 
        async function makePayment(orderId) {
          console.log(orderId);
          fetch(`/user/orders/retryPayment`, {
            method: "POST",
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ "orderId": orderId }),
          })
            .then((res) => {
              return res.json();
            }).then(async (response) => {
              if (response.success) {
                console.log(response)
                console.log(response.razorpayOrder.id)// testing 
                let paymentStatus = false;
                const options = {
                  key: '<%= process.env.RAZORPAY_KEY_ID %>',
                  amount: response.razorpayOrder.amount,
                  currency: response.currency,
                  name: 'Bytez',
                  order_id: response.razorpayOrder.id,
                  handler: function (paymentResponse) {
                    paymentStatus = true;
                    console.log('Payment Response:', paymentResponse);
                    // Place order after successful payment
                    fetch('/user/orders/verifyPayment', {
                      method: "POST",
                      headers: {

                        "Content-Type": "application/json",
                      },
                      body: JSON.stringify({

                        paymentMethod: 'razorpay',
                        razorpayPaymentId: paymentResponse.razorpay_payment_id,
                        razorpayOrderId: paymentResponse.razorpay_order_id,
                        razorpaySignature: paymentResponse.razorpay_signature,
                        paymentStatus: true,
                      })
                    }).then(res => res.json())
                      .then(res => {
                        console.log(res);
                        if (res.success) {
                          Swal.fire({
                            title: 'Order Confirmed',
                            text: res.message,
                            icon: 'success',
                            confirmButtonText: 'Okay'
                          }).then(() => {
                            window.location.href = '/user/orders';
                          });
                        } else {
                          Swal.fire({
                            title: 'Failed to Confirm Order',
                            text: res.message,
                            icon: 'error',
                            confirmButtonText: 'Okay'
                          });
                        }
                      }).catch(err => {
                        console.log(err)
                        Swal.fire({
                          title: 'Failed to Place Order',
                          text: err.message,
                          icon: 'error',
                          confirmButtonText: 'Okay'
                        }).then(() => {
                          window.location.href = '/user/orders';
                        })

                      })


                  },
                  theme: {
                    color: '#000000'
                  },
                  modal: {
                    ondismiss: function () {
                      console.log('Payment canceled');
                      Swal.fire({
                        title: 'Payment Canceled',
                        text: 'Your payment was canceled. Would you like to retry?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Retry',
                        cancelButtonText: 'Cancel'
                      }).then((result) => {
                        if (result.isConfirmed) {
                          // Retry the payment
                          const razorpay = new Razorpay(options);
                          razorpay.open();
                        } else {
                          // Cancel the order or redirect to a different page
                          Swal.fire({
                            title: 'Order Placed ',
                            text: 'Your Payment has been canceled !!',
                            icon: 'info',
                            confirmButtonText: 'Okay'
                          }).then(() => {
                            window.location.href = '/user/orders'; // Redirect to cart or another page
                          });
                        }
                      });
                    }
                  }
                };

                const razorpay = new Razorpay(options);
                let paymentResult = await razorpay.open()


              } else {
                Swal.fire({
                  title: 'Oops...',
                  text: `${data.message}`,
                  icon: 'error',
                  confirmButtonText: 'Cool'
                }).then(() => {
                  window.location.href = '/user/cart';
                });
              }
            }
            )

        }
      </script>


      <script>
        // function for return the delivered order 
        // async function returnOrder(orderId) {
        //   try {
        //     // send a return request to the admin with a message
        //     // Swal.fire({
        //     //   title: "Are you sure?",
        //     //   text: "You won't be able to revert this!",
        //     //   icon: "warning",
        //     //   input: "text",
        //     //   showCancelButton: true,
        //     //   confirmButtonColor: "#3085d6",
        //     //   cancelButtonColor: "#d33",
        //     //   confirmButtonText: "Yes, delete it!"
        //     // }).then((result) => {
        //     //   if (result.isConfirmed) {
        //     //     Swal.fire("Deleted!", "Your file has been deleted.", "success");
        //     //   }
        //     // });



        //   } catch (error) {
        //     console.log(error);
        //   }
        // }
      </script>
</body>

</html>